{
  "name": "class",
  "preferGlobal": true,
  "version": "0.1.4",
  "author": {
    "name": "Jared Grippe",
    "email": "jared@deadlyicon.com"
  },
  "description": "A simple yet powerful Ruby-like Class inheritance system",
  "main": "class.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/deadlyicon/class.js.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "keywords": [
    "class",
    "Class",
    "Constructor",
    "prototype",
    "inheritance",
    "class inheritance"
  ],
  "analyze": false,
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "object-inspect": "*"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "class.js\n========\n\nA super small ruby-ish class system with both class and class instance  inheritance.\n\n[![Build Status](https://travis-ci.org/deadlyicon/class.js.png)](https://travis-ci.org/deadlyicon/class.js)\n\n## Example usage:\n\n```javascript\n\nvar Animal = Class.new(function(){\n\n  this.class.find = function(id, callback){\n    // $.getJSON('/animals/'+id, this.new.bind(this));\n  };\n\n  this.initialize = function(attributes){\n    this.birthday = new Date;\n    this.extend(attributes);\n  };\n\n});\n\nvar Mammal = Animal.subclass({\n  warmBlooded: true\n});\n\nvar HasLegs = {\n  walk: function(feet, direction){\n    console.log(this.name, 'is walking', feet, 'feet toward', direction);\n  }\n};\n\nvar Biped = Mammal.subclass(function(){\n  this.numberOfLegs = 2;\n  this.extend(HasLegs);\n});\n\nvar Quadruped = Mammal.subclass({\n  numberOfLegs: 4,\n});\n\nQuadruped.include(HasLegs);\n\nvar Kangaroo = Biped.subclass();\n\nvar Dog = Quadruped.subclass();\n\nvar jumpy = Kangaroo.new({name:'Jumpy'});\njumpy.walk(10,'north');\n\nvar sparky = Dog.find(12);\n\n```\n\n## Class.js does not use constructors\n\n```javascript\nnew Animal //=> TypeError: object is not a function\n```\n\nThe reason `Animal` is not a `Function` is because functions cannot be created with a prototype other than `Function.prototype`.\n\n\n## Extend\n\nBoth the `Class` and `Class#prototype` objects have an extend function that supports plain objects as well as functions\n\n```javascript\nvar Kitten = Class.new();\n\nKitten.extend({\n  defaultFurColor: 'orange'\n});\n\nKitten.defaultFurColor; //= 'orange'\n\nKitten.extend(function(){\n  this.brown = true;\n});\n\nKitten.defaultFurColor; //= 'brown'\n\nKitten.prototype.extend({\n  age: 1\n});\n\nKitten.new().age; //= 1\n\nKitten.prototype.extend(function(){\n  this.age = 12;\n});\n\nKitten.new().age; //= 12\n```\n## subclass\n\nWhen you call `Animal.subclass()` it returns a new object that points to `Animal`. The new object's prototype property is also a new object that points to `Animal.prototype`.\n\n## modules\n\nA Module can either be a plain object or a function.\n\n```javascript\nvar Car = Class.new(function(){\n  this.initialize = this.extend;\n});\n\nvar HasEngine = {\n  engine: function(){\n    if (!this._engine) this._engine = Engine.new(this);\n    return this._engine;\n  }\n};\n\nvar PersistedWithLocalStorage = function(){\n\n  function save(){\n    // localStorage[…] = …;\n    return this;\n  }\n\n  function find(id){\n    // return this.new(localStorage[…]);\n  }\n\n  return function(){\n    this.class.find = find;\n    this.save = save;\n  };\n\n}();\n\nCar.include(HasEngine, PersistedWithLocalStorage);\n\ntypeof Car.find //= 'function'\ntypeof Car.new().save //= 'function'\ntypeof Car.new().engine //= 'function'\n```\n\n## Tests\n\n```bash\nnpm install mocha\nnpm install expect.js\nmocha -R spec\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deadlyicon/class.js/issues"
  },
  "_id": "class@0.1.4",
  "dist": {
    "shasum": "f7c2e6434d777e75011bd4a53ba1b937bf5091fb"
  },
  "_from": "class@",
  "_resolved": "https://registry.npmjs.org/class/-/class-0.1.4.tgz"
}
